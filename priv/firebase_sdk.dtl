<script type="text/javascript">
 (async () => {
     const config = {{firebase_config|safe}};
     const authProviders = {{auth_providers|safe}}; // e.g., { google: { id: 'google-client-id', scopes: [...] }, ... }
     const containerId = "{{container_id}}";

     const { initializeApp } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js');
     const { getAuth, signInWithPopup, signInWithEmailAndPassword, GoogleAuthProvider, OAuthProvider, signOut } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js');

     const app = initializeApp(config);
     const auth = getAuth(app);
     const providerMap = {};

     for (const [key, cfg] of Object.entries(authProviders)) {
         let provider;
         if (key === 'google') {
             provider = new GoogleAuthProvider();
         } else {
             provider = new OAuthProvider(cfg.providerId);
         }
         if (cfg.scopes && Array.isArray(cfg.scopes)) {
             cfg.scopes.forEach(scope => provider.addScope(scope));
         }
         if (cfg.customParams) {
             provider.setCustomParameters(cfg.customParams);
         }
         providerMap[key] = provider;
     }

     const container = document.getElementById(containerId);
     if (!container) return console.error('Missing auth container:', containerId);
     console.log({providerMap});

     Object.keys(providerMap).forEach(key => {
         const btn = document.getElementById(key + '-login-btn');
         console.log(btn, key);
         if (btn) btn.addEventListener('click', () => handleLogin(key));
     });

     async function handleLogin(key) {
         try {

             // email / phone is excemt from signInWithPopup
             if (key === 'email') {
                 const email = prompt("Enter your email:");
                 const password = prompt("Enter your password:");
                 const result = await signInWithEmailAndPassword(auth, email, password);
                 console.log({result});
                 const out = { user: extractUser(result.user), provider: key };
                 document.firebaseLogin(out);
                 return;
             }

             const result = await signInWithPopup(auth, providerMap[key]);
             const userData = extractUser(result.user);
             const credential = result.credential;
             const out = { user: userData, provider: key, credential };
             document.firebaseLogin(out);
         } catch (e) {
             console.error(key + ' login failed', e);
             document.firebaseLoginFail({
                 code: e.code || 'unknown',
                 message: e.message || 'Unknown error',
                 stack: e.stack
             });
         }
     }

     function extractUser(user) {
         return {
             uid: user.uid,
             email: user.email,
             displayName: user.displayName,
             photoURL: user.photoURL,
             phoneNumber: user.phoneNumber,
             emailVerified: user.emailVerified,
             providerId: user.providerId,
             providerData: user.providerData.map(p => ({
                 uid: p.uid,
                 displayName: p.displayName,
                 email: p.email,
                 phoneNumber: p.phoneNumber,
                 photoURL: p.photoURL,
                 providerId: p.providerId
             })),
             metadata: {
                 creationTime: user.metadata.creationTime,
                 lastSignInTime: user.metadata.lastSignInTime
             }
         };
     }

     window.FirebaseAuthHandler = {
         signOut: async () => {
             try {
                 await signOut(auth);
                 console.log('Signed out');
             } catch (e) {
                 console.error('Sign out failed', e);
                 document.firebaseLoginFail({
                     code: e.code || 'signout_error',
                     message: e.message,
                     stack: e.stack
                 });
             }
         }
     };
 })();
</script>
